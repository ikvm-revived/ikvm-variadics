<Project>

    <UsingTask TaskName="GetMetadataTask" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <Items ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
            <MetadataString Output="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Code Type="Fragment" Language="cs">
                <![CDATA[
                var command = new StringBuilder();
                
                foreach (var item in Items)
                {
                    command.AppendFormat("ItemName={0}\r\n", item);
                    foreach (string parameter in item.MetadataNames)
                        command.AppendFormat("  {0}={1}\r\n", parameter, item.GetMetadata(parameter));
                        
                    command.AppendFormat("\r\n");
                }
                
                MetadataString = command.ToString();
      ]]>
            </Code>
        </Task>
    </UsingTask>

    <Target Name="GetLibProjectReferences">
        <MSBuild Projects="@(LibProjectReference->'%(ProjectFile)')" Targets="GetTargetPath" Properties="Platform=%(LibProjectReference.Platform);Configuration=%(LibProjectReference.Configuration)">
            <Output TaskParameter="TargetOutputs" ItemName="_LibProjectReferenceWithOutputPath" />
        </MSBuild>
        <ItemGroup>
            <LibProjectReferenceWithOutputPath Include="@(_LibProjectReferenceWithOutputPath)">
                <OutputPath>%(Identity)</OutputPath>
            </LibProjectReferenceWithOutputPath>
        </ItemGroup>
    </Target>

    <Target Name="GetItemsForLibProjectReferences" BeforeTargets="Build;AssignTargetPaths" DependsOnTargets="GetLibProjectReferences" Condition="'$(DesignTimeBuild)' != 'true'">
        <ItemGroup>
            <None Include="@(LibProjectReferenceWithOutputPath->'%(OutputPath)')">
                <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
                <Link>%(LibProjectReferenceWithOutputPath.OutputDir)\%(LibProjectReferenceWithOutputPath.Filename)%(LibProjectReferenceWithOutputPath.Extension)</Link>
                <Pack>true</Pack>
                <PackagePath>%(LibProjectReferenceWithOutputPath.OutputDir)</PackagePath>
                <PackageCopyToOutput>true</PackageCopyToOutput>
            </None>
        </ItemGroup>
    </Target>

    <Target Name="BuildLibProjectReferences" BeforeTargets="Compile" DependsOnTargets="GetLibProjectReferences" Condition="'$(DesignTimeBuild)' != 'true'">
        <MSBuild Projects="%(LibProjectReferenceWithOutputPath.ProjectFile)" Targets="Build" Properties="Platform=%(LibProjectReferenceWithOutputPath.Platform);Configuration=%(LibProjectReferenceWithOutputPath.Configuration)">
            <Output TaskParameter="TargetOutputs" ItemName="LibProjectReferencesCompileOutput" />
        </MSBuild>
    </Target>

    <Target Name="AssignPublishProjectConfiguration" Condition=" '@(PublishProjectReference)' != '' " Inputs="@(PublishProjectReference)" Outputs="dummy">
        <PropertyGroup>
            <OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration Condition="'$(OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration)' == ''">true</OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration>
            <ShouldUnsetParentConfigurationAndPlatform Condition="'$(ShouldUnsetParentConfigurationAndPlatform)' == '' and ('$(BuildingInsideVisualStudio)' == 'true' or '$(BuildingSolutionFile)' == 'true')">true</ShouldUnsetParentConfigurationAndPlatform>
            <ShouldUnsetParentConfigurationAndPlatform Condition="'$(ShouldUnsetParentConfigurationAndPlatform)' == ''">false</ShouldUnsetParentConfigurationAndPlatform>
            <AddSyntheticProjectReferencesForSolutionDependencies Condition="'$(AddSyntheticProjectReferencesForSolutionDependencies)' == '' and '$(TargetFrameworkIdentifier)' == 'Silverlight'">false</AddSyntheticProjectReferencesForSolutionDependencies>
            <AddSyntheticProjectReferencesForSolutionDependencies Condition="'$(AddSyntheticProjectReferencesForSolutionDependencies)' == '' and '$(BuildingInsideVisualStudio)' != 'true'">true</AddSyntheticProjectReferencesForSolutionDependencies>
        </PropertyGroup>
        <AssignProjectConfiguration
            ProjectReferences="@(PublishProjectReference)"
            CurrentProject="$(MSBuildProjectFullPath)"
            CurrentProjectConfiguration="$(Configuration)"
            CurrentProjectPlatform="$(Platform)"
            DefaultToVcxPlatformMapping="$(DefaultToVcxPlatformMapping)"
            VcxToDefaultPlatformMapping="$(VcxToDefaultPlatformMapping)"
            OutputType="$(OutputType)"
            ResolveConfigurationPlatformUsingMappings="false"
            SolutionConfigurationContents="$(CurrentSolutionConfigurationContents)"
            AddSyntheticProjectReferencesForSolutionDependencies="$(AddSyntheticProjectReferencesForSolutionDependencies)"
            OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration = "$(OnlyReferenceAndBuildProjectsEnabledInSolutionConfiguration)"
            ShouldUnsetParentConfigurationAndPlatform = "$(ShouldUnsetParentConfigurationAndPlatform)" >
            <Output TaskParameter="AssignedProjects" ItemName="_PublishProjectReferenceWithConfiguration"/>
            <Output TaskParameter="UnassignedProjects" ItemName="_PublishProjectReferenceWithConfiguration"/>
        </AssignProjectConfiguration>
    </Target>

    <Target Name="GetPublishProjectReferences" DependsOnTargets="AssignPublishProjectConfiguration" Inputs="@(_PublishProjectReferenceWithConfiguration)" Outputs="dummy">
        <ItemGroup>
            <_PublishProjectReference Include="@(_PublishProjectReferenceWithConfiguration)">
                <ProjectName>$([System.IO.Path]::GetFileNameWithoutExtension('%(Identity)'))</ProjectName>
                <PublishTargetPath Condition=" '%(_PublishProjectReferenceWithConfiguration.PublishTargetPath)' != '' ">$([MSBuild]::EnsureTrailingSlash('%(_PublishProjectReferenceWithConfiguration.PublishTargetPath)'))</PublishTargetPath>
                <PublishPackagePath Condition=" '%(_PublishProjectReferenceWithConfiguration.PublishPackagePath)' != '' ">$([MSBuild]::EnsureTrailingSlash('%(_PublishProjectReferenceWithConfiguration.PublishPackagePath)'))</PublishPackagePath>
            </_PublishProjectReference>
        </ItemGroup>
    </Target>

    <Target Name="GetPublishProjectReferenceItems" DependsOnTargets="GetPublishProjectReferences" Inputs="@(_PublishProjectReference)" Outputs="dummy">
        <MSBuild Projects="@(_PublishProjectReference)" Targets="Publish;PublishItemsOutputGroup" BuildInParallel="$(BuildInParallel)" Properties="%(_PublishProjectReference.SetConfiguration);%(_PublishProjectReference.SetPlatform);%(_PublishProjectReference.SetTargetFramework);%(_PublishProjectReference.PublishProperties)" RemoveProperties="%(_PublishProjectReference.GlobalPropertiesToRemove);%(_PublishProjectReference.PublishPropertiesToRemove);" RebaseOutputs="true">
            <Output TaskParameter="TargetOutputs" ItemName="_PublishProjectReferenceItems" />
        </MSBuild>
    </Target>

    <Target Name="GetPublishProjectReferenceCopyToOutputDirectoryItems" DependsOnTargets="GetPublishProjectReferenceItems">
        <ItemGroup>
            <ContentWithTargetPath Include="@(_PublishProjectReferenceItems)" Condition=" '%(_PublishProjectReferenceItems.PublishTargetPath)' != '' ">
                <CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
                <TargetPath>%(_PublishProjectReferenceItems.PublishTargetPath)%(_PublishProjectReferenceItems.TargetPath)</TargetPath>
                <Pack Condition=" '%(_PublishProjectReferenceItems.PublishPackagePath)' != '' ">true</Pack>
                <PackagePath Condition=" '%(_PublishProjectReferenceItems.PublishPackagePath)' != '' ">%(_PublishProjectReferenceItems.PublishPackagePath)%(_PublishProjectReferenceOutputItems.TargetPath)</PackagePath>
            </ContentWithTargetPath>
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GetCopyToOutputDirectoryItemsDependsOn>
            AssignPublishProjectConfiguration;
            GetPublishProjectReferences;
            GetPublishProjectReferenceItems;
            GetPublishProjectReferenceCopyToOutputDirectoryItems;
            $(GetCopyToOutputDirectoryItemsDependsOn);
        </GetCopyToOutputDirectoryItemsDependsOn>
    </PropertyGroup>

    <Target Name="GetPublishProjectReferencePackageItems" DependsOnTargets="GetPublishProjectReferenceItems">
        <ItemGroup>
            <_PackageFiles Include="@(_PublishProjectReferenceItems->Distinct())" Condition=" '%(_PublishProjectReferenceItems.PublishPackagePath)' != '' ">
                <PackagePath>%(_PublishProjectReferenceItems.PublishPackagePath)%(_PublishProjectReferenceItems.TargetPath)</PackagePath>
            </_PackageFiles>
        </ItemGroup>
    </Target>

    <PropertyGroup>
        <GetPublishProjectReferenceItemsBeforePackageFilesDependsOn>
            AssignPublishProjectConfiguration;
            GetPublishProjectReferences;
            GetPublishProjectReferenceItems;
            GetPublishProjectReferencePackageItems;
            $(GetPublishProjectReferenceItemsBeforePackageFilesDependsOn);
        </GetPublishProjectReferenceItemsBeforePackageFilesDependsOn>
    </PropertyGroup>

    <Target Name="GetPublishProjectReferencePackageItemsBeforeGetPackageFiles" DependsOnTargets="$(GetPublishProjectReferenceItemsBeforePackageFilesDependsOn)" BeforeTargets="_GetPackageFiles">
        
    </Target>

    <Target Name="GetPackageOutputPath" DependsOnTargets="_GetAbsoluteOutputPathsForPack" Returns="$(PackageOutputAbsolutePath)">
        
    </Target>

</Project>
